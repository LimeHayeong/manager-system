import * as moment from 'moment-timezone'
import * as winston from "winston"
import * as winstonDaily from 'winston-daily-rotate-file'

import { WinstonModule } from "nest-winston"

const customLevels = {
    levels: {
        error: 0,
        warn: 1,
        noti: 2,
        info: 3,
        debug: 4
    },
    colors: {
        error: 'red',
        warn: '',
        noti: '',
        info: '',
        debug: ''
    }
}

const appendTimestamp = winston.format((info, opts) => {
    if(opts.tz) {
        info.timestamp = moment().tz(opts.tz).format()
    }
    return info
})

// 로그 저장 파일 옵션
const dailyOptions = {
    level: 'http', // http보다 높은 단계의 로그만 기록
    datePattern: 'YYYY-MM-DD', // 날짜 포맷 지정
    dirname: __dirname + '/../../logs', // 저장할 URL
    filename: `task.log.%DATE%`,
    maxFiles: 30, // 30일의 로그 저장
    zippedArchive: true, // 압축 여부
    colorize: true,
    handleExceptions: true,
    json: true,
  }

export const winstonLogger = WinstonModule.createLogger({
    levels: customLevels.levels,
    transports: [
        new winston.transports.Console({
            level: 'debug',
            format:
                winston.format.combine(
                    appendTimestamp({ tz: 'Asia/Seoul' }),
                    winston.format.printf((info) => {
                        return `${info.timestamp}[${info.level}]-[${info.domain}:${info.task}][${info.logTiming}]: ${info.data}`
                    })
                ),
            }),
            // console에 출력 형태 바꾸려면 저 부분 수정하면 됨.
            // TODO: 콘솔 출력 형태, 파일 저장, 

        new winstonDaily({
            ...dailyOptions,
            format: winston.format.combine(
                appendTimestamp({ tz: 'Asia/Seoul '}),
                winston.format.json()
            )
        })
    ],
})